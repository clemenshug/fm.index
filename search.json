[{"path":"https://clemenshug.github.io/fm.index/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 President Fellows Harvard College Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://clemenshug.github.io/fm.index/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Clemens Hug. Author, maintainer.","code":""},{"path":"https://clemenshug.github.io/fm.index/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Hug C (2021). fm.index: Fast String Searching. R package version 0.1.0.","code":"@Manual{,   title = {fm.index: Fast String Searching},   author = {Clemens Hug},   year = {2021},   note = {R package version 0.1.0}, }"},{"path":"https://clemenshug.github.io/fm.index/index.html","id":"fmindex","dir":"","previous_headings":"","what":"Fast String Searching","title":"Fast String Searching","text":"fm.index R package providing fast data structure (FM Index) finding occurrences string snippets large libraries strings. fm.index wraps C++ library SDSL v3 (licensed BSD license uses Compressed Suffix Array based Wavelet Tree Burrow-Wheeler Transform given string library.","code":""},{"path":"https://clemenshug.github.io/fm.index/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Fast String Searching","text":"can install development version GitHub :","code":"# install.packages(\"remotes\") remotes::install_github(\"clemenshug/fm.index\")"},{"path":"https://clemenshug.github.io/fm.index/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Fast String Searching","text":"example search library state names states contain substring “new”. result data frame three columns. pattern_index index query pattern, library_index index matching string index, position starting position match indexed string. indices 1-based. order extract matching states can use library_index subset vector original state names.","code":"library(fm.index)  data(\"state\") print(state.name) #>  [1] \"Alabama\"        \"Alaska\"         \"Arizona\"        \"Arkansas\"       #>  [5] \"California\"     \"Colorado\"       \"Connecticut\"    \"Delaware\"       #>  [9] \"Florida\"        \"Georgia\"        \"Hawaii\"         \"Idaho\"          #> [13] \"Illinois\"       \"Indiana\"        \"Iowa\"           \"Kansas\"         #> [17] \"Kentucky\"       \"Louisiana\"      \"Maine\"          \"Maryland\"       #> [21] \"Massachusetts\"  \"Michigan\"       \"Minnesota\"      \"Mississippi\"    #> [25] \"Missouri\"       \"Montana\"        \"Nebraska\"       \"Nevada\"         #> [29] \"New Hampshire\"  \"New Jersey\"     \"New Mexico\"     \"New York\"       #> [33] \"North Carolina\" \"North Dakota\"   \"Ohio\"           \"Oklahoma\"       #> [37] \"Oregon\"         \"Pennsylvania\"   \"Rhode Island\"   \"South Carolina\" #> [41] \"South Dakota\"   \"Tennessee\"      \"Texas\"          \"Utah\"           #> [45] \"Vermont\"        \"Virginia\"       \"Washington\"     \"West Virginia\"  #> [49] \"Wisconsin\"      \"Wyoming\"  index <- fm_index_create(state.name, case_sensitive = FALSE) hits <- fm_index_locate(\"new\", index) print(hits) #>   pattern_index library_index position #> 1             1            29        1 #> 2             1            30        1 #> 3             1            31        1 #> 4             1            32        1 print(state.name[hits$library_index]) #> [1] \"New Hampshire\" \"New Jersey\"    \"New Mexico\"    \"New York\""},{"path":"https://clemenshug.github.io/fm.index/index.html","id":"performance","dir":"","previous_headings":"","what":"Performance","title":"Fast String Searching","text":"speedup achieved using fm.index simple string scans, example using grepl() stringi::stri_locate(), depends kind strings library.","code":""},{"path":"https://clemenshug.github.io/fm.index/index.html","id":"random-strings","dir":"","previous_headings":"Performance","what":"Random strings","title":"Fast String Searching","text":"example, can generate million random strings length 50 search occurrences letters “ab”. Random strings hard compress, searching FM Index yields modest ~3-fold speedup.","code":"library(stringi) library(microbenchmark)  set.seed(42) lib_random <- stri_rand_strings(1000000, 50) idx_random <- fm_index_create(lib_random)  head(   fm_index_locate(\"ab\", idx_random) ) #>   pattern_index library_index position #> 1             1        792988       36 #> 2             1        251840       23 #> 3             1        875759        1 #> 4             1        341798       47 #> 5             1         56031       50 #> 6             1        376499       40  microbenchmark(   fm.index = fm_index_locate(\"ab\", idx_random),   stringi = stri_locate_all_coll(lib_random, \"ab\"),   times = 10 ) #> Unit: milliseconds #>      expr       min        lq      mean    median        uq       max neval cld #>  fm.index  863.0986  899.0695  907.8352  915.2957  924.7553  938.9154    10  a  #>   stringi 3512.8051 3609.2250 3763.6620 3676.4697 3940.7926 4199.2934    10   b"},{"path":"https://clemenshug.github.io/fm.index/index.html","id":"real-world-text","dir":"","previous_headings":"Performance","what":"Real-world text","title":"Fast String Searching","text":"Real-world text usually repetitive much easier compress random strings. example, search line book instances word “help”. text book encoded efficiently FM Index resulting ~50-fold speedup.","code":"book_path <- tempfile() download.file(\"http://aleph.gutenberg.org/1/2/3/7/12370/12370-8.zip\", book_path) book <- scan(unz(book_path, \"12370-8.txt\"), sep = \"\\n\", what = \"character\") idx_book <- fm_index_create(book)  head(   fm_index_locate(\"help\", idx_book) ) #>   pattern_index library_index position #> 1             1          5068       29 #> 2             1          1422       14 #> 3             1          5986       34 #> 4             1          8280        5 #> 5             1          8531       28 #> 6             1          8459       40  microbenchmark(   fm.index = fm_index_locate(\"help\", idx_book),   stringi = stri_locate_all_coll(book, \"help\"),   times = 10 ) #> Unit: microseconds #>      expr       min        lq      mean     median        uq       max neval #>  fm.index   375.546   378.581   533.815   622.6205   634.076   646.129    10 #>   stringi 31206.814 31753.017 32497.154 32429.9385 32745.842 35008.482    10 #>  cld #>   a  #>    b"},{"path":"https://clemenshug.github.io/fm.index/index.html","id":"funding","dir":"","previous_headings":"","what":"Funding","title":"Fast String Searching","text":"work supported NIH grants U54-HL127365, U24-DK116204, U54-HL127624.","code":""},{"path":"https://clemenshug.github.io/fm.index/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Fast String Searching","text":"package provided MIT license. bundled SDSL library licensed BSD license.","code":""},{"path":"https://clemenshug.github.io/fm.index/reference/fm_index_create.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct new FM Index — fm_index_create","title":"Construct new FM Index — fm_index_create","text":"FM indices data structures memory efficient storage large sets strings. Searches partial matches query strings within set strings index extremely fast.","code":""},{"path":"https://clemenshug.github.io/fm.index/reference/fm_index_create.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct new FM Index — fm_index_create","text":"","code":"fm_index_create(strings, case_sensitive = FALSE)"},{"path":"https://clemenshug.github.io/fm.index/reference/fm_index_create.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct new FM Index — fm_index_create","text":"strings Vector strings construct FM index case_sensitive Build case-sensitive index TRUE","code":""},{"path":"https://clemenshug.github.io/fm.index/reference/fm_index_create.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct new FM Index — fm_index_create","text":"FM Index object can passed fm_index_locate() order find matches.","code":""},{"path":[]},{"path":"https://clemenshug.github.io/fm.index/reference/fm_index_create.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Construct new FM Index — fm_index_create","text":"","code":"data(\"state\") index <- fm_index_create(state.name, case_sensitive = FALSE)"},{"path":"https://clemenshug.github.io/fm.index/reference/fm_index_locate.html","id":null,"dir":"Reference","previous_headings":"","what":"Locate given patterns — fm_index_locate","title":"Locate given patterns — fm_index_locate","text":"Finds occurrences given patterns FM Index, analogous stringr::str_locate() stringi::stri_locate() functions.","code":""},{"path":"https://clemenshug.github.io/fm.index/reference/fm_index_locate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Locate given patterns — fm_index_locate","text":"","code":"fm_index_locate(patterns, index)"},{"path":"https://clemenshug.github.io/fm.index/reference/fm_index_locate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Locate given patterns — fm_index_locate","text":"patterns Vector strings find FM index index Index created fm_index_create()","code":""},{"path":"https://clemenshug.github.io/fm.index/reference/fm_index_locate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Locate given patterns — fm_index_locate","text":"data frame three columns. pattern_index index query pattern, library_index index matching string index, position starting position match indexed string. indices 1-based.","code":""},{"path":[]},{"path":"https://clemenshug.github.io/fm.index/reference/fm_index_locate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Locate given patterns — fm_index_locate","text":"","code":"data(\"state\") index <- fm_index_create(state.name, case_sensitive = FALSE) # Find all states with \"new\" in their names hits <- fm_index_locate(\"new\", index) hits #>   pattern_index library_index position #> 1             1            29        1 #> 2             1            30        1 #> 3             1            31        1 #> 4             1            32        1 # Show matching strings in library state.name[hits$library_index] #> [1] \"New Hampshire\" \"New Jersey\"    \"New Mexico\"    \"New York\"       hits <- fm_index_locate(\"ar\", index) hits #>   pattern_index library_index position #> 1             1             8        6 #> 2             1            38       12 #> 3             1             3        1 #> 4             1             4        1 #> 5             1            33        8 #> 6             1            40        8 #> 7             1            20        2 state.name[hits$library_index] #> [1] \"Delaware\"       \"Pennsylvania\"   \"Arizona\"        \"Arkansas\"       #> [5] \"North Carolina\" \"South Carolina\" \"Maryland\""},{"path":"https://clemenshug.github.io/fm.index/reference/fm_index_save.html","id":null,"dir":"Reference","previous_headings":"","what":"Save / load FM indices — fm_index_save","title":"Save / load FM indices — fm_index_save","text":"FM indices can stored disk loaded memory order avoid re-computing index every time new R session opened.","code":""},{"path":"https://clemenshug.github.io/fm.index/reference/fm_index_save.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save / load FM indices — fm_index_save","text":"","code":"fm_index_save(index, path)  fm_index_load(path)"},{"path":"https://clemenshug.github.io/fm.index/reference/fm_index_save.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save / load FM indices — fm_index_save","text":"index FM Index saved disk path Path save index load index ","code":""},{"path":"https://clemenshug.github.io/fm.index/reference/fm_index_save.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Save / load FM indices — fm_index_save","text":"fm_index_save: Save FM Index disk fm_index_load: Load FM Index disk","code":""},{"path":[]},{"path":"https://clemenshug.github.io/fm.index/reference/fm_index_save.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Save / load FM indices — fm_index_save","text":"","code":"data(\"state\") index_1 <- fm_index_create(state.name, case_sensitive = FALSE)  tmp_path <- tempfile() fm_index_save(index_1, tmp_path) index_2 <- fm_index_load(tmp_path)  identical(   fm_index_locate(\"new\", index_1),   fm_index_locate(\"new\", index_2) ) #> [1] TRUE"}]
