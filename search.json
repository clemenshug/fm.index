[{"path":"https://clemenshug.github.io/fm.index/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 President Fellows Harvard College Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://clemenshug.github.io/fm.index/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Clemens Hug. Author, maintainer.","code":""},{"path":"https://clemenshug.github.io/fm.index/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Hug C (2022). fm.index: Fast String Searching. R package version 0.1.1, https://github.com/clemenshug/fm.index.","code":"@Manual{,   title = {fm.index: Fast String Searching},   author = {Clemens Hug},   year = {2022},   note = {R package version 0.1.1},   url = {https://github.com/clemenshug/fm.index}, }"},{"path":"https://clemenshug.github.io/fm.index/index.html","id":"fmindex","dir":"","previous_headings":"","what":"Fast String Searching","title":"Fast String Searching","text":"fm.index R package providing fast data structure (FM Index) finding occurrences string snippets large libraries strings. Partial string matching can ~50-fold faster simple string scans many real world string collections (corpuses). given corpus converted compact -memory FM index representation can efficiently queried partial string matches. fm.index wraps C++ library SDSL v3 uses Compressed Suffix Array based Wavelet Tree Burrow-Wheeler Transform given string library.","code":""},{"path":"https://clemenshug.github.io/fm.index/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Fast String Searching","text":"can install development version GitHub :","code":"# install.packages(\"remotes\") remotes::install_github(\"clemenshug/fm.index\")"},{"path":"https://clemenshug.github.io/fm.index/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Fast String Searching","text":"example search library state names states contain substring “new”. result data frame three columns. pattern_index index query pattern, corpus_index index matching string string corpus, position starting position match indexed string. indices 1-based. order extract matching states can use corpus_index subset vector original state names.","code":"library(fm.index)  data(\"state\") print(state.name) #>  [1] \"Alabama\"        \"Alaska\"         \"Arizona\"        \"Arkansas\"       #>  [5] \"California\"     \"Colorado\"       \"Connecticut\"    \"Delaware\"       #>  [9] \"Florida\"        \"Georgia\"        \"Hawaii\"         \"Idaho\"          #> [13] \"Illinois\"       \"Indiana\"        \"Iowa\"           \"Kansas\"         #> [17] \"Kentucky\"       \"Louisiana\"      \"Maine\"          \"Maryland\"       #> [21] \"Massachusetts\"  \"Michigan\"       \"Minnesota\"      \"Mississippi\"    #> [25] \"Missouri\"       \"Montana\"        \"Nebraska\"       \"Nevada\"         #> [29] \"New Hampshire\"  \"New Jersey\"     \"New Mexico\"     \"New York\"       #> [33] \"North Carolina\" \"North Dakota\"   \"Ohio\"           \"Oklahoma\"       #> [37] \"Oregon\"         \"Pennsylvania\"   \"Rhode Island\"   \"South Carolina\" #> [41] \"South Dakota\"   \"Tennessee\"      \"Texas\"          \"Utah\"           #> [45] \"Vermont\"        \"Virginia\"       \"Washington\"     \"West Virginia\"  #> [49] \"Wisconsin\"      \"Wyoming\"  index <- fm_index_create(state.name, case_sensitive = FALSE) hits <- fm_index_locate(\"new\", index) print(hits) #>   pattern_index corpus_index position #> 1             1           29        1 #> 2             1           30        1 #> 3             1           31        1 #> 4             1           32        1 print(state.name[hits$library_index]) #> character(0)"},{"path":"https://clemenshug.github.io/fm.index/index.html","id":"performance","dir":"","previous_headings":"","what":"Performance","title":"Fast String Searching","text":"speedup achieved using fm.index simple string scans, example using grepl() stringi::stri_locate(), depends kind strings library.","code":""},{"path":"https://clemenshug.github.io/fm.index/index.html","id":"random-strings","dir":"","previous_headings":"Performance","what":"Random strings","title":"Fast String Searching","text":"example, can generate million random strings length 50 search occurrences letters “ab”. Random strings hard compress, searching using FM Index yields modest ~4-fold speedup.","code":"library(stringi) library(microbenchmark)  set.seed(42) lib_random <- stri_rand_strings(1000000, 50) idx_random <- fm_index_create(lib_random)  head(fm_index_locate(\"ab\", idx_random)) #>   pattern_index corpus_index position #> 1             1       792988       36 #> 2             1       251840       23 #> 3             1       875759        1 #> 4             1       341798       47 #> 5             1        56031       50 #> 6             1       376499       40  random_benchmark <- microbenchmark(   fm.index = fm_index_locate(\"ab\", idx_random),   stringi = stri_locate_all_coll(lib_random, \"ab\"),   times = 3 ) print(random_benchmark) #> Unit: milliseconds #>      expr       min        lq      mean    median       uq       max neval cld #>  fm.index  927.7187  937.2335  947.8389  946.7483  957.899  969.0497     3  a  #>   stringi 3732.3779 3772.4135 3833.5300 3812.4491 3884.106 3955.7630     3   b"},{"path":"https://clemenshug.github.io/fm.index/index.html","id":"real-world-text","dir":"","previous_headings":"Performance","what":"Real-world text","title":"Fast String Searching","text":"Real-world text usually repetitive much easier compress random strings. example, search line book instances word “help”. Five random lines book. number rows resulting data frame tells us word “water” occurs 73 times. text book encoded efficiently FM Index, resulting ~55-fold speedup.","code":"book_path <- tempfile() download.file(\"http://aleph.gutenberg.org/1/2/3/7/12370/12370.zip\", book_path) book <- scan(unz(book_path, \"12370.txt\"), sep = \"\\n\", what = \"character\") book[sample(length(book), 5)] #> [1] \"bring her a true and particular account of that strange circumstance,\"   #> [2] \"it. For a long while this was my way, that whatever living beings\"       #> [3] \"reason his appearance is such; he is burning with the fire of love; how\" #> [4] \"prosperous. What strange fancy has possessed the royal mind! If to this\" #> [5] \"water of immortality, and that in consequence of having drunk thereof,\" idx_book <- fm_index_create(book) help_locations <- fm_index_locate(\"water\", idx_book)  nrow(help_locations) #> [1] 73 head(help_locations) #>   pattern_index corpus_index position #> 1             1         5262       43 #> 2             1         5533       16 #> 3             1         4097       23 #> 4             1         6969       18 #> 5             1         4130       13 #> 6             1         4141       46 book_benchmark <- microbenchmark(   fm.index = fm_index_locate(\"water\", idx_book),   stringi = stri_locate_all_coll(book, \"water\"),   times = 10 ) print(book_benchmark) #> Unit: microseconds #>      expr       min       lq       mean     median        uq       max neval #>  fm.index   482.183   522.51   585.4968   528.3555   725.481   772.178    10 #>   stringi 26649.996 27683.24 29156.1119 28875.5665 30187.416 32227.820    10 #>  cld #>   a  #>    b"},{"path":"https://clemenshug.github.io/fm.index/index.html","id":"funding","dir":"","previous_headings":"","what":"Funding","title":"Fast String Searching","text":"work supported NIH grants U54-HL127365, U24-DK116204, U54-HL127624.","code":""},{"path":"https://clemenshug.github.io/fm.index/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Fast String Searching","text":"package provided MIT license. bundled SDSL library licensed BSD license.","code":""},{"path":"https://clemenshug.github.io/fm.index/reference/fm_index_create.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct new FM Index — fm_index_create","title":"Construct new FM Index — fm_index_create","text":"FM indices data structures memory efficient storage large sets strings (corpus). Searches partial matches corpus extremely fast.","code":""},{"path":"https://clemenshug.github.io/fm.index/reference/fm_index_create.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct new FM Index — fm_index_create","text":"","code":"fm_index_create(strings, case_sensitive = FALSE)"},{"path":"https://clemenshug.github.io/fm.index/reference/fm_index_create.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct new FM Index — fm_index_create","text":"strings Vector strings (corpus) construct FM index case_sensitive Build case-sensitive index TRUE","code":""},{"path":"https://clemenshug.github.io/fm.index/reference/fm_index_create.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct new FM Index — fm_index_create","text":"FM Index object can passed fm_index_locate() finding matches corpus.","code":""},{"path":[]},{"path":"https://clemenshug.github.io/fm.index/reference/fm_index_create.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Construct new FM Index — fm_index_create","text":"","code":"data(\"state\") index <- fm_index_create(state.name, case_sensitive = FALSE)"},{"path":"https://clemenshug.github.io/fm.index/reference/fm_index_locate.html","id":null,"dir":"Reference","previous_headings":"","what":"Locate given patterns — fm_index_locate","title":"Locate given patterns — fm_index_locate","text":"Finds occurrences given patterns FM Index, analogous stringi::stri_locate() str_locate() stringr.","code":""},{"path":"https://clemenshug.github.io/fm.index/reference/fm_index_locate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Locate given patterns — fm_index_locate","text":"","code":"fm_index_locate(patterns, index)"},{"path":"https://clemenshug.github.io/fm.index/reference/fm_index_locate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Locate given patterns — fm_index_locate","text":"patterns Vector strings look index index Index created fm_index_create()","code":""},{"path":"https://clemenshug.github.io/fm.index/reference/fm_index_locate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Locate given patterns — fm_index_locate","text":"data frame three columns. pattern_index index query pattern, corpus_index index matching string corpus, position starting position match within corpus string. indices 1-based.","code":""},{"path":[]},{"path":"https://clemenshug.github.io/fm.index/reference/fm_index_locate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Locate given patterns — fm_index_locate","text":"","code":"data(\"state\") index <- fm_index_create(state.name, case_sensitive = FALSE) # Find all states with \"new\" in their names hits <- fm_index_locate(\"new\", index) hits #>   pattern_index corpus_index position #> 1             1           29        1 #> 2             1           30        1 #> 3             1           31        1 #> 4             1           32        1 # Show matching strings in library state.name[hits$library_index] #> character(0)  hits <- fm_index_locate(\"ar\", index) hits #>   pattern_index corpus_index position #> 1             1            8        6 #> 2             1           38       12 #> 3             1            3        1 #> 4             1            4        1 #> 5             1           33        8 #> 6             1           40        8 #> 7             1           20        2 state.name[hits$library_index] #> character(0)"},{"path":"https://clemenshug.github.io/fm.index/reference/fm_index_save.html","id":null,"dir":"Reference","previous_headings":"","what":"Save / load FM indices — fm_index_save","title":"Save / load FM indices — fm_index_save","text":"FM indices can stored disk loaded memory order avoid re-computing index every time new R session opened.","code":""},{"path":"https://clemenshug.github.io/fm.index/reference/fm_index_save.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save / load FM indices — fm_index_save","text":"","code":"fm_index_save(index, path)  fm_index_load(path)"},{"path":"https://clemenshug.github.io/fm.index/reference/fm_index_save.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save / load FM indices — fm_index_save","text":"index FM Index saved disk path Path save index load index ","code":""},{"path":"https://clemenshug.github.io/fm.index/reference/fm_index_save.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Save / load FM indices — fm_index_save","text":"fm_index_load, FM Index object can passed fm_index_locate() finding matches corpus. fm_index_save, return value. Called side-effects.","code":""},{"path":"https://clemenshug.github.io/fm.index/reference/fm_index_save.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Save / load FM indices — fm_index_save","text":"fm_index_save: Save FM Index disk fm_index_load: Load FM Index disk","code":""},{"path":[]},{"path":"https://clemenshug.github.io/fm.index/reference/fm_index_save.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Save / load FM indices — fm_index_save","text":"","code":"data(\"state\") index_1 <- fm_index_create(state.name, case_sensitive = FALSE)  tmp_path <- tempfile() fm_index_save(index_1, tmp_path) index_2 <- fm_index_load(tmp_path)  identical(   fm_index_locate(\"new\", index_1),   fm_index_locate(\"new\", index_2) ) #> [1] TRUE"}]
